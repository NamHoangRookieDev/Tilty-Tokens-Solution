class Solution {
public:
    vector<string> solve(vector<string> &board){
        int total_greenTokens = 0;
        for(int i = 0; i < board.size();i++){
            for(int j = 0; j < board[i].length(); j++){
                if(board[i][j] == '1') total_greenTokens++;
            }
        }

        vector<vector<string>> boardAltive = {board};

        unordered_map<string,vector<string>> boardHolder = {{"",board}};
        unordered_map<string,int> total_greenTokens_Holder = {{"",total_greenTokens}};
        vector<string> currentRun = {""};

        vector<string> result;
        bool foundWay = false;

        while(!foundWay){
            if(currentRun.size() == 0) break;

            unordered_map<string,vector<string>> new_boardHolder;
            unordered_map<string, int> new_total_greenTokens_Holder;
            vector<string> newRun;

            for(int i = 0; i < currentRun.size(); i++){
                string run;
                vector<string> runBoard;
                int run_total_greenTokens;

                vector<char> directions = {'l','r','u','d'};
                for(int j = 0; j < 4; j++){
                    if(directions[j] == currentRun[i][currentRun[i].length()-1]) continue;
                    run = currentRun[i] + directions[j];
                    runBoard = boardHolder[currentRun[i]];
                    run_total_greenTokens = total_greenTokens_Holder[currentRun[i]];

                    bool canMove;

                    if(directions[j] == 'l') canMove = movesLeft(runBoard,run_total_greenTokens);
                    else if(directions[j] == 'r') canMove = movesRight(runBoard,run_total_greenTokens);
                    else if(directions[j] == 'd') canMove = movesDown(runBoard,run_total_greenTokens);
                    else if(directions[j] == 'u') canMove = movesUp(runBoard,run_total_greenTokens);

                    if(canMove){
                        if(run_total_greenTokens == 0){
                            foundWay = true;
                            result.push_back(run);
                        }
                        else if(check(runBoard,boardAltive)){
                            new_boardHolder[run] = runBoard;
                            new_total_greenTokens_Holder[run] = run_total_greenTokens;
                            newRun.push_back(run);

                            boardAltive.push_back(runBoard);
                        }
                    }
                }
            }

            boardHolder = new_boardHolder;
            total_greenTokens_Holder = new_total_greenTokens_Holder;
            currentRun = newRun;
        }

        return result;
    }
private:
    bool check(vector<string> &a, vector<vector<string>> &b){
        for(int i = 0; i < b.size(); i++){
            if(a == b[i]) return false;
        }
        return true;
    }

    bool movesLeft(vector<string> &board, int &total_greenToken){
        bool change = false;

        for(int i = 0; i < board.size(); i++){
            int bestMove = 0, run = 0;
            bool meetHole = false;

            while(run < board[i].length()){
                if(board[i][run] == '1' || board[i][run] == '0'){
                    if(meetHole){
                        change = true;

                        if(board[i][run] == '0') return false;
                        if(board[i][run] == '1'){
                            board[i][run] = '.';
                            total_greenToken--;
                        }
                    }

                    else if(run != bestMove){
                        board[i][bestMove] = board[i][run];
                        board[i][run] = '.';

                        change = true;

                        bestMove+=1;
                    }
                    else bestMove = run+1;
                }
                else if(board[i][run] == 'X'){
                    bestMove = run+1;
                    meetHole = false;
                }
                else if(board[i][run] == '2'){
                    meetHole = true;
                }
                run++;
            }
        }

        return change;
    }

    bool movesRight(vector<string> &board, int &total_greenToken){
        bool change = false;

        for(int i = 0; i < board.size(); i++){
            int bestMove = board[i].length() - 1, run = board[i].length() - 1;
            bool meetHole = false;

            while(run >= 0){
                if(board[i][run] == '1' || board[i][run] == '0'){
                    if(meetHole){
                        change = true;

                        if(board[i][run] == '0') return false;
                        if(board[i][run] == '1'){
                            board[i][run] = '.';
                            total_greenToken--;
                        }
                    }

                    else if(run != bestMove){
                        board[i][bestMove] = board[i][run];
                        board[i][run] = '.';

                        change = true;

                        bestMove-=1;
                    }
                    else bestMove = run-1;
                }
                else if(board[i][run] == 'X'){
                    bestMove = run-1;
                    meetHole = false;
                }
                else if(board[i][run] == '2'){
                    meetHole = true;
                }
                run--;
            }
        }

        return change;
    }

    bool movesUp(vector<string> &board, int &total_greenToken){
        bool change = false;

        for(int i = 0; i < board[0].length(); i++){
            int bestMove = 0, run = 0;
            bool meetHole = false;

            while(run < board.size()){
                if(board[run][i] == '1' || board[run][i] == '0'){
                    if(meetHole){
                        change = true;

                        if(board[run][i] == '0') return false;
                        if(board[run][i] == '1'){
                            board[run][i] = '.';
                            total_greenToken--;
                        }
                    }

                    else if(run != bestMove){
                        board[bestMove][i] = board[run][i];
                        board[run][i] = '.';

                        change = true;

                        bestMove+=1;
                    }
                    else bestMove = run+1;
                }
                else if(board[run][i] == 'X'){
                    bestMove = run+1;
                    meetHole = false;
                }
                else if(board[run][i] == '2'){
                    meetHole = true;
                }
                run++;
            }
        }

        return change;
    }

    bool movesDown(vector<string> &board, int& total_greenToken){
        bool change = false;

        for(int i = 0; i < board[0].length(); i++){
            int bestMove = board.size() - 1, run = board.size() - 1;
            bool meetHole = false;

            while(run >= 0){
                if(board[run][i] == '1' || board[run][i] == '0'){
                    if(meetHole){
                        change = true;

                        if(board[run][i] == '0') return false;
                        if(board[run][i] == '1'){
                            board[run][i] = '.';
                            total_greenToken--;
                        }
                    }

                    else if(run != bestMove){
                        board[bestMove][i] = board[run][i];
                        board[run][i] = '.';

                        change = true;

                        bestMove-=1;
                    }
                    else bestMove = run-1;
                }
                else if(board[run][i] == 'X'){
                    bestMove = run-1;
                    meetHole = false;
                }
                else if(board[run][i] == '2'){
                    meetHole = true;
                }
                run--;
            }
        }

        return change;
    }
};